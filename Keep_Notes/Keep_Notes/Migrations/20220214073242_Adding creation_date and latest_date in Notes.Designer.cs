// <auto-generated />
using System;
using Keep_Notes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Keep_Notes.Migrations
{
    [DbContext(typeof(KeepNotesDBContext))]
    [Migration("20220214073242_Adding creation_date and latest_date in Notes")]
    partial class Addingcreation_dateandlatest_dateinNotes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Keep_Notes.Model.AgeGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .HasColumnName("age")
                        .HasColumnType("enum('7-12','13-18','19-30','31-50','51-70','70+')");

                    b.HasKey("Id");

                    b.ToTable("age_groups");
                });

            modelBuilder.Entity("Keep_Notes.Model.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Keep_Notes.Model.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("Keep_Notes.Model.Notes", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(33)")
                        .HasMaxLength(33);

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color")
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("'#FFFFFF'")
                        .HasMaxLength(10);

                    b.Property<string>("Keywords")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("keywords")
                        .HasColumnType("enum('Cooking','Studying','Articles','Books','Other')")
                        .HasDefaultValueSql("'Other'");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16);

                    b.Property<bool>("Private")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("private")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("creation_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("latest_change")
                        .HasColumnType("datetime");

                    b.HasKey("Title")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .HasName("FK_user_note");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("Keep_Notes.Model.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AgeGroupId")
                        .HasColumnName("age_group_id")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId")
                        .HasName("FK_age_group_user");

                    b.HasIndex("CityId")
                        .HasName("FK_city_user");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Keep_Notes.Model.Notes", b =>
                {
                    b.HasOne("Keep_Notes.Model.Users", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_user_note")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Keep_Notes.Model.Users", b =>
                {
                    b.HasOne("Keep_Notes.Model.AgeGroups", "AgeGroup")
                        .WithMany("Users")
                        .HasForeignKey("AgeGroupId")
                        .HasConstraintName("FK_age_group_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Keep_Notes.Model.Cities", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_city_user")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
